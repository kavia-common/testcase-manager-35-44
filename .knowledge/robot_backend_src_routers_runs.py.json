{"is_source_file": true, "format": "Python", "description": "This is a FastAPI router module defining API endpoints for managing 'runs' within a testing or workflow system. It includes routes to list runs, get details of a specific run, trigger new runs for test cases or scenarios, and cancel existing runs. The module interacts with a database via SQLAlchemy, refers to core models and schemas, and calls external services for execution and history management.", "external_files": ["src/core/db", "src/core/schemas", "src/core/models", "src/services/executor", "src/services/history"], "external_methods": ["get_db", "list_runs", "get_run", "trigger_run_for_testcase", "trigger_run_for_scenario", "RunStatus.CANCELED"], "published": ["router"], "classes": [], "methods": [{"name": "list_runs(db: AsyncSession = Depends(get_db))", "description": "Handles GET requests to list all runs, fetching data from the history service.", "scope": "", "scopeKind": ""}, {"name": "get_run(run_id: int, db: AsyncSession = Depends(get_db))", "description": "Handles GET requests to retrieve details of a specific run by ID, raising 404 if not found.", "scope": "", "scopeKind": ""}, {"name": "trigger_run(payload: RunTrigger, db: AsyncSession = Depends(get_db))", "description": "Handles POST requests to trigger a new run based on a specified target type ('testcase' or 'scenario'), performing database queries and invoking external executor services.", "scope": "", "scopeKind": ""}, {"name": "cancel_run(run_id: int, db: AsyncSession = Depends(get_db))", "description": "Handles POST requests to cancel an existing run, marking its status as canceled in the database.", "scope": "", "scopeKind": ""}], "calls": ["history.list_runs", "history.get_run", "executor.trigger_run_for_testcase", "executor.trigger_run_for_scenario", "db.execute", "db.flush", "db.commit", "db.refresh"], "search-terms": ["FastAPI runs management", "trigger run", "cancel run", "testcase execution", "scenario execution", "RunOut schema", "Runs API endpoint"], "state": 2, "file_id": 19, "knowledge_revision": 39, "git_revision": "", "ctags": [{"_type": "tag", "name": "cancel_run", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/runs.py", "pattern": "/^async def cancel_run(run_id: int, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(run_id: int, db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "get_run", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/runs.py", "pattern": "/^async def get_run(run_id: int, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(run_id: int, db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "list_runs", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/runs.py", "pattern": "/^async def list_runs(db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/runs.py", "pattern": "/^router = APIRouter(prefix=\"\\/runs\", tags=[\"Runs\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "trigger_run", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/runs.py", "pattern": "/^async def trigger_run(payload: RunTrigger, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(payload: RunTrigger, db: AsyncSession = Depends(get_db))"}], "hash": "25181c70e6fca75451c5728e8b8fc323", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/routers/runs.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/runs\", tags=[\"Runs\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"39": ""}]}