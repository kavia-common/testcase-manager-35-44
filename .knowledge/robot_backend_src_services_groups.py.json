{"is_source_file": true, "format": "Python", "description": "This file defines asynchronous service functions for managing 'groups' within a database, including listing, retrieving, creating, updating, deleting, and managing associations between groups and test cases using SQLAlchemy ORM.", "external_files": ["src.core.models", "src.core.schemas"], "external_methods": ["models.Group", "models.GroupTestCase", "models.TestCase", "select", "delete"], "published": ["list_groups", "get_group", "create_group", "update_group", "delete_group", "assign_testcase", "remove_testcase"], "classes": [], "methods": [{"name": "List[models.Group] list_groups(db: AsyncSession)", "description": "Asynchronously retrieves all group records ordered by creation date descending.", "scope": "", "scopeKind": ""}, {"name": "Optional[models.Group] get_group(db: AsyncSession, group_id: int)", "description": "Asynchronously retrieves a single group by its ID.", "scope": "", "scopeKind": ""}, {"name": "models.Group create_group(db: AsyncSession, data: GroupCreate)", "description": "Asynchronously creates a new group record with provided data.", "scope": "", "scopeKind": ""}, {"name": "Optional[models.Group] update_group(db: AsyncSession, group_id: int, data: GroupUpdate)", "description": "Asynchronously updates an existing group's name and/or description.", "scope": "", "scopeKind": ""}, {"name": "bool delete_group(db: AsyncSession, group_id: int)", "description": "Asynchronously deletes a group and its associated test cases linkages.", "scope": "", "scopeKind": ""}, {"name": "bool assign_testcase(db: AsyncSession, group_id: int, testcase_id: int)", "description": "Asynchronously assigns a test case to a group, preventing duplicates.", "scope": "", "scopeKind": ""}, {"name": "bool remove_testcase(db: AsyncSession, group_id: int, testcase_id: int)", "description": "Asynchronously removes a test case from a group.", "scope": "", "scopeKind": ""}], "calls": ["select(models.Group)", "select(models.Group).where(models.Group.id == group_id)", "select(models.TestCase).where(models.TestCase.id == testcase_id)", "delete(models.GroupTestCase).where(models.GroupTestCase.group_id == group_id)", "delete(models.Group).where(models.Group.id == group_id)"], "search-terms": ["group management", "SQLAlchemy async", "group CRUD", "testcase assignment", "group service functions"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "assign_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def assign_testcase(db: AsyncSession, group_id: int, testcase_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: AsyncSession, group_id: int, testcase_id: int)"}, {"_type": "tag", "name": "create_group", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def create_group(db: AsyncSession, data: GroupCreate) -> models.Group:$/", "language": "Python", "typeref": "typename:models.Group", "kind": "function", "signature": "(db: AsyncSession, data: GroupCreate)"}, {"_type": "tag", "name": "delete_group", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def delete_group(db: AsyncSession, group_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: AsyncSession, group_id: int)"}, {"_type": "tag", "name": "get_group", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def get_group(db: AsyncSession, group_id: int) -> Optional[models.Group]:$/", "language": "Python", "typeref": "typename:Optional[models.Group]", "kind": "function", "signature": "(db: AsyncSession, group_id: int)"}, {"_type": "tag", "name": "list_groups", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def list_groups(db: AsyncSession) -> List[models.Group]:$/", "language": "Python", "typeref": "typename:List[models.Group]", "kind": "function", "signature": "(db: AsyncSession)"}, {"_type": "tag", "name": "remove_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def remove_testcase(db: AsyncSession, group_id: int, testcase_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: AsyncSession, group_id: int, testcase_id: int)"}, {"_type": "tag", "name": "update_group", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/groups.py", "pattern": "/^async def update_group(db: AsyncSession, group_id: int, data: GroupUpdate) -> Optional[models.Gr/", "language": "Python", "typeref": "typename:Optional[models.Group]", "kind": "function", "signature": "(db: AsyncSession, group_id: int, data: GroupUpdate)"}], "hash": "21e74009ab728d5bbf092456be852054", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/services/groups.py", "revision_history": [{"21": ""}]}