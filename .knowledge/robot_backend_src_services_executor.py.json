{"is_source_file": true, "format": "Python", "description": "This is a Python source file that provides asynchronous functions for executing Robot Framework test cases and scenarios*, managing run states, capturing output streams, and interfacing with a database via SQLAlchemy. It orchestrates test execution in a temporary working directory, handles subprocess management, and updates the database with run statuses and outputs.", "external_files": ["asyncio", "os", "tempfile", "datetime", "typing", "sqlalchemy", "src.core", "src.core.models"], "external_methods": ["asyncio.create_task", "asyncio.to_thread", "asyncio.create_subprocess_exec", "asyncio.gather", "select", "datetime.utcnow", "session.add", "session.flush", "session.commit", "session.execute", "session.refresh", "models.Run", "models.RunStatus", "models.TestCase", "models.Scenario"], "published": ["trigger_run_for_testcase", "trigger_run_for_scenario"], "classes": [], "methods": [{"name": "_capture_stream(stream, run_id: int, session: AsyncSession, stream_name: str)", "description": "Captures an asyncio stream line-by-line and saves each line as a RunStep record in the database.", "scope": "", "scopeKind": ""}, {"name": "List[str] _build_robot_cli(args: List[str])", "description": "Constructs the command list for invoking Robot Framework CLI with given arguments.", "scope": "", "scopeKind": ""}, {"name": "models.Run trigger_run_for_testcase( db: AsyncSession, testcase: models.TestCase, variables: Optional[Dict[str, Any]] = None, )", "description": "Creates a new run for a specified testcase and initiates its asynchronous execution.", "scope": "", "scopeKind": ""}, {"name": "models.Run trigger_run_for_scenario( db: AsyncSession, scenario: models.Scenario, variables: Optional[Dict[str, Any]] = None, )", "description": "Creates a new run for a specified scenario and starts its execution asynchronously.", "scope": "", "scopeKind": ""}, {"name": "str _write_test_file(content: str, dir_path: str, basename: str)", "description": "Writes Robot Framework content to a temporary '.robot' file in a specified directory.", "scope": "", "scopeKind": ""}, {"name": "_start_subprocess_and_capture(cmd: List[str], cwd: str, run_id: int, session: AsyncSession)", "description": "Starts a subprocess to execute the Robot test, captures stdout and stderr streams, and waits for completion.", "scope": "", "scopeKind": ""}, {"name": "_update_run_status( session: AsyncSession, run_id: int, status: RunStatus, message: Optional[str] = None, started_at: Optional[datetime] = None, finished_at: Optional[datetime] = None, robot_output_path: Optional[str] = None, robot_log_path: Optional[str] = None, )", "description": "Updates the status, timestamps, and output paths of a run in the database.", "scope": "", "scopeKind": ""}, {"name": "_run_robot_testcase(db: AsyncSession, run_id: int)", "description": "Performs execution of a single test case run, including temporary work directory setup, command execution, and status update.", "scope": "", "scopeKind": ""}, {"name": "_run_robot_scenario(db: AsyncSession, run_id: int)", "description": "Performs execution of a scenario, including combining test case contents into a suite file, executing, and updating statuses.", "scope": "", "scopeKind": ""}, {"name": "_write()", "scope": "_write_test_file", "scopeKind": "function", "description": "unavailable"}, {"name": "_write_suite()", "scope": "_run_robot_scenario", "scopeKind": "function", "description": "unavailable"}], "search-terms": ["asyncio", "robot framework", "test execution", "scenario", "run status", "session", "subprocess", "temporary directory", "Robot CLI", "pytest", "async functions", "Database ORM"], "state": 2, "file_id": 12, "knowledge_revision": 51, "git_revision": "04de29e13b1718ced7d3d2857c1094b5c23a4e8d", "revision_history": [{"25": ""}, {"51": "04de29e13b1718ced7d3d2857c1094b5c23a4e8d"}], "ctags": [{"_type": "tag", "name": "_build_robot_cli", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^def _build_robot_cli(args: List[str]) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "function", "signature": "(args: List[str])"}, {"_type": "tag", "name": "_capture_stream", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _capture_stream(stream, run_id: int, session: AsyncSession, stream_name: str):$/", "language": "Python", "kind": "function", "signature": "(stream, run_id: int, session: AsyncSession, stream_name: str)"}, {"_type": "tag", "name": "_run_robot_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _run_robot_scenario(db: AsyncSession, run_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession, run_id: int)"}, {"_type": "tag", "name": "_run_robot_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _run_robot_testcase(db: AsyncSession, run_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession, run_id: int)"}, {"_type": "tag", "name": "_start_subprocess_and_capture", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _start_subprocess_and_capture(cmd: List[str], cwd: str, run_id: int, session: AsyncSes/", "language": "Python", "kind": "function", "signature": "(cmd: List[str], cwd: str, run_id: int, session: AsyncSession)"}, {"_type": "tag", "name": "_update_run_status", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _update_run_status($/", "language": "Python", "kind": "function", "signature": "( session: AsyncSession, run_id: int, status: RunStatus, message: Optional[str] = None, started_at: Optional[datetime] = None, finished_at: Optional[datetime] = None, robot_output_path: Optional[str] = None, robot_log_path: Optional[str] = None, )"}, {"_type": "tag", "name": "_write", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^    def _write():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "_write_test_file", "scopeKind": "function"}, {"_type": "tag", "name": "_write_suite", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^        def _write_suite():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "_run_robot_scenario", "scopeKind": "function"}, {"_type": "tag", "name": "_write_test_file", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _write_test_file(content: str, dir_path: str, basename: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(content: str, dir_path: str, basename: str)"}, {"_type": "tag", "name": "trigger_run_for_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def trigger_run_for_scenario($/", "language": "Python", "typeref": "typename:models.Run", "kind": "function", "signature": "( db: AsyncSession, scenario: models.Scenario, variables: Optional[Dict[str, Any]] = None, )"}, {"_type": "tag", "name": "trigger_run_for_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def trigger_run_for_testcase($/", "language": "Python", "typeref": "typename:models.Run", "kind": "function", "signature": "( db: AsyncSession, testcase: models.TestCase, variables: Optional[Dict[str, Any]] = None, )"}], "hash": "71ef473dce625e133dded8a04c3e32b3", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/services/executor.py"}