{"is_source_file": true, "format": "Python", "description": "This file provides asynchronous functions for executing and managing Robot Framework test cases and scenarios, including starting subprocesses, capturing output streams, and updating test run statuses in a database. It appears to be part of a backend service responsible for orchestrating robot test executions.", "external_files": ["os", "tempfile", "datetime", "typing", "sqlalchemy", "src.core.models"], "external_methods": ["sqlalchemy.select", "sqlalchemy.ext.asyncio.AsyncSession", "asyncio.create_task", "asyncio.to_thread", "asyncio.create_subprocess_exec", "asyncio.gather", "asyncio.sleep"], "published": ["trigger_run_for_testcase", "trigger_run_for_scenario"], "classes": [], "methods": [{"name": "_capture_stream(stream, run_id: int, session: AsyncSession, stream_name: str)", "description": "Asynchronously reads lines from an asyncio stream, decodes them, and saves each line as a RunStep in the database.", "scope": "", "scopeKind": ""}, {"name": "List[str] _build_robot_cli(args: List[str])", "description": "Constructs a command list to invoke Robot Framework via Python's -m module with specified arguments.", "scope": "", "scopeKind": ""}, {"name": "models.Run trigger_run_for_testcase( db: AsyncSession, testcase: models.TestCase, variables: Optional[Dict[str, Any]] = None, )", "description": "Creates and initiates an asynchronous run for a specific test case, updating the database and starting execution.", "scope": "", "scopeKind": ""}, {"name": "models.Run trigger_run_for_scenario( db: AsyncSession, scenario: models.Scenario, variables: Optional[Dict[str, Any]] = None, )", "description": "Creates and initiates an asynchronous run for a scenario composed of multiple test cases.", "scope": "", "scopeKind": ""}, {"name": "str _write_test_file(content: str, dir_path: str, basename: str)", "description": "Writes Robot Framework test content to a temporary .robot file in a non-blocking manner.", "scope": "", "scopeKind": ""}, {"name": "_start_subprocess_and_capture(cmd: List[str], cwd: str, run_id: int, session: AsyncSession)", "description": "Starts a subprocess for robot execution and concurrently captures stdout and stderr streams, updating run status accordingly.", "scope": "", "scopeKind": ""}, {"name": "_update_run_status( session: AsyncSession, run_id: int, status: RunStatus, message: Optional[str] = None, started_at: Optional[datetime] = None, finished_at: Optional[datetime] = None, robot_output_path: Optional[str] = None, robot_log_path: Optional[str] = None, )", "description": "Updates the status and related metadata of a test run in the database.", "scope": "", "scopeKind": ""}, {"name": "_run_robot_testcase(db: AsyncSession, run_id: int)", "description": "Worker function to execute a single test case, managing output files and updating the run status.", "scope": "", "scopeKind": ""}, {"name": "_run_robot_scenario(db: AsyncSession, run_id: int)", "description": "Worker function to execute a scenario composed of multiple test cases, combining their contents and managing execution.", "scope": "", "scopeKind": ""}, {"name": "_write()", "scope": "_write_test_file", "scopeKind": "function", "description": "unavailable"}, {"name": "_write_suite()", "scope": "_run_robot_scenario", "scopeKind": "function", "description": "unavailable"}], "search-terms": ["robot", "testcase", "scenario", "asyncio subprocess", "robot framework execution", "test run management", "robot output capture", "session database update"], "state": 2, "file_id": 12, "knowledge_revision": 25, "git_revision": "", "ctags": [{"_type": "tag", "name": "_build_robot_cli", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^def _build_robot_cli(args: List[str]) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "function", "signature": "(args: List[str])"}, {"_type": "tag", "name": "_capture_stream", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _capture_stream(stream, run_id: int, session: AsyncSession, stream_name: str):$/", "language": "Python", "kind": "function", "signature": "(stream, run_id: int, session: AsyncSession, stream_name: str)"}, {"_type": "tag", "name": "_run_robot_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _run_robot_scenario(db: AsyncSession, run_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession, run_id: int)"}, {"_type": "tag", "name": "_run_robot_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _run_robot_testcase(db: AsyncSession, run_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession, run_id: int)"}, {"_type": "tag", "name": "_start_subprocess_and_capture", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _start_subprocess_and_capture(cmd: List[str], cwd: str, run_id: int, session: AsyncSes/", "language": "Python", "kind": "function", "signature": "(cmd: List[str], cwd: str, run_id: int, session: AsyncSession)"}, {"_type": "tag", "name": "_update_run_status", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _update_run_status($/", "language": "Python", "kind": "function", "signature": "( session: AsyncSession, run_id: int, status: RunStatus, message: Optional[str] = None, started_at: Optional[datetime] = None, finished_at: Optional[datetime] = None, robot_output_path: Optional[str] = None, robot_log_path: Optional[str] = None, )"}, {"_type": "tag", "name": "_write", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^    def _write():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "_write_test_file", "scopeKind": "function"}, {"_type": "tag", "name": "_write_suite", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^        def _write_suite():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "_run_robot_scenario", "scopeKind": "function"}, {"_type": "tag", "name": "_write_test_file", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def _write_test_file(content: str, dir_path: str, basename: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(content: str, dir_path: str, basename: str)"}, {"_type": "tag", "name": "trigger_run_for_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def trigger_run_for_scenario($/", "language": "Python", "typeref": "typename:models.Run", "kind": "function", "signature": "( db: AsyncSession, scenario: models.Scenario, variables: Optional[Dict[str, Any]] = None, )"}, {"_type": "tag", "name": "trigger_run_for_testcase", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/executor.py", "pattern": "/^async def trigger_run_for_testcase($/", "language": "Python", "typeref": "typename:models.Run", "kind": "function", "signature": "( db: AsyncSession, testcase: models.TestCase, variables: Optional[Dict[str, Any]] = None, )"}], "hash": "1485197ae1f7fa5ee7122a4619085ac9", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/services/executor.py", "revision_history": [{"25": ""}]}