{"is_source_file": true, "format": "Python", "description": "This file defines API route handlers for managing 'scenarios' in a web application using FastAPI. It includes endpoints for listing, retrieving, creating, updating, and deleting scenario entities. The routes depend on a service layer for business logic and use dependency injection to access the database session.", "external_files": ["src/core/db", "src/core/schemas", "src/services"], "external_methods": ["get_db", "ScenarioCreate", "ScenarioOut", "ScenarioUpdate", "scenarios.list_scenarios", "scenarios.get_scenario", "scenarios.create_scenario", "scenarios.update_scenario", "scenarios.delete_scenario"], "published": ["router"], "classes": [], "methods": [{"name": "list_scenarios(db: AsyncSession = Depends(get_db))", "description": "Handles GET requests to retrieve a list of all scenarios, responding with a list of ScenarioOut objects.", "scope": "", "scopeKind": ""}, {"name": "get_scenario(scenario_id: int, db: AsyncSession = Depends(get_db))", "description": "Handles GET requests to retrieve a specific scenario by ID, raising a 404 error if not found.", "scope": "", "scopeKind": ""}, {"name": "create_scenario(payload: ScenarioCreate, db: AsyncSession = Depends(get_db))", "description": "Handles POST requests to create a new scenario using provided data payload.", "scope": "", "scopeKind": ""}, {"name": "update_scenario(scenario_id: int, payload: ScenarioUpdate, db: AsyncSession = Depends(get_db))", "description": "Handles PUT requests to update an existing scenario identified by ID, raising a 404 error if not found.", "scope": "", "scopeKind": ""}, {"name": "delete_scenario(scenario_id: int, db: AsyncSession = Depends(get_db))", "description": "Handles DELETE requests to remove a scenario by ID, raising a 404 error if not found.", "scope": "", "scopeKind": ""}], "calls": ["svc.list_scenarios", "svc.get_scenario", "svc.create_scenario", "svc.update_scenario", "svc.delete_scenario"], "search-terms": ["FastAPI", "APIRouter", "scenarios", "CRUD", "scenario_id", "async", "HTTPException", "status", "Dependency"], "state": 2, "file_id": 18, "knowledge_revision": 37, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^async def create_scenario(payload: ScenarioCreate, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(payload: ScenarioCreate, db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "delete_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^async def delete_scenario(scenario_id: int, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(scenario_id: int, db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "get_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^async def get_scenario(scenario_id: int, db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(scenario_id: int, db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "list_scenarios", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^async def list_scenarios(db: AsyncSession = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncSession = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^router = APIRouter(prefix=\"\\/scenarios\", tags=[\"Scenarios\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "svc", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^from src.services import scenarios as svc$/", "language": "Python", "kind": "unknown", "nameref": "unknown:scenarios"}, {"_type": "tag", "name": "update_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/routers/scenarios.py", "pattern": "/^async def update_scenario(scenario_id: int, payload: ScenarioUpdate, db: AsyncSession = Depends(/", "language": "Python", "kind": "function", "signature": "(scenario_id: int, payload: ScenarioUpdate, db: AsyncSession = Depends(get_db))"}], "hash": "61d3c157b2fd96eb4cf4b06b08a04f94", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/routers/scenarios.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/scenarios\", tags=[\"Scenarios\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"37": ""}]}