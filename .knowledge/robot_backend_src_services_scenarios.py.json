{"is_source_file": true, "format": "Python", "description": "Source code for service functions managing 'Scenario' entities in an async database context, including listing, retrieving, creating, updating, and deleting scenarios.", "external_files": ["src.core.models", "src.core.schemas"], "external_methods": ["select", "delete"], "published": ["list_scenarios", "get_scenario", "create_scenario", "update_scenario", "delete_scenario"], "classes": [], "methods": [{"name": "List[models.Scenario] list_scenarios(db: AsyncSession)", "description": "Asynchronously retrieves a list of all Scenario objects ordered by creation date descending.", "scope": "", "scopeKind": ""}, {"name": "Optional[models.Scenario] get_scenario(db: AsyncSession, scenario_id: int)", "description": "Asynchronously retrieves a single Scenario object by its ID.", "scope": "", "scopeKind": ""}, {"name": "models.Scenario create_scenario(db: AsyncSession, data: ScenarioCreate)", "description": "Asynchronously creates a new Scenario object, optionally associating test cases, then returns it.", "scope": "", "scopeKind": ""}, {"name": "Optional[models.Scenario] update_scenario(db: AsyncSession, scenario_id: int, data: ScenarioUpdate)", "description": "Asynchronously updates an existing Scenario object with new data and associations, returning the updated object.", "scope": "", "scopeKind": ""}, {"name": "bool delete_scenario(db: AsyncSession, scenario_id: int)", "description": "Asynchronously deletes a Scenario object and associated links, returning True if deletion was successful.", "scope": "", "scopeKind": ""}], "calls": ["db.execute", "db.add", "db.flush", "db.commit", "db.refresh"], "search-terms": ["async database scenario management", "Scenario CRUD", "SQLAlchemy async scenario"], "state": 2, "file_id": 11, "knowledge_revision": 23, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/scenarios.py", "pattern": "/^async def create_scenario(db: AsyncSession, data: ScenarioCreate) -> models.Scenario:$/", "language": "Python", "typeref": "typename:models.Scenario", "kind": "function", "signature": "(db: AsyncSession, data: ScenarioCreate)"}, {"_type": "tag", "name": "delete_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/scenarios.py", "pattern": "/^async def delete_scenario(db: AsyncSession, scenario_id: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(db: AsyncSession, scenario_id: int)"}, {"_type": "tag", "name": "get_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/scenarios.py", "pattern": "/^async def get_scenario(db: AsyncSession, scenario_id: int) -> Optional[models.Scenario]:$/", "language": "Python", "typeref": "typename:Optional[models.Scenario]", "kind": "function", "signature": "(db: AsyncSession, scenario_id: int)"}, {"_type": "tag", "name": "list_scenarios", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/scenarios.py", "pattern": "/^async def list_scenarios(db: AsyncSession) -> List[models.Scenario]:$/", "language": "Python", "typeref": "typename:List[models.Scenario]", "kind": "function", "signature": "(db: AsyncSession)"}, {"_type": "tag", "name": "update_scenario", "path": "/home/kavia/workspace/code-generation/testcase-manager-35-44/robot_backend/src/services/scenarios.py", "pattern": "/^async def update_scenario(db: AsyncSession, scenario_id: int, data: ScenarioUpdate) -> Optional[/", "language": "Python", "typeref": "typename:Optional[models.Scenario]", "kind": "function", "signature": "(db: AsyncSession, scenario_id: int, data: ScenarioUpdate)"}], "hash": "4f4dcaca6db765f1ad9e920d6a54dcdb", "format-version": 4, "code-base-name": "robot_backend", "filename": "robot_backend/src/services/scenarios.py", "revision_history": [{"23": ""}]}